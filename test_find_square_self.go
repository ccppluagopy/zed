package main

import (
	"fmt"
	"time"
	"unsafe"
)

var (
	//block5 = [5]uint32{0xF8000002, 0x20000008, 0x80000022, 0x000000F8, 0x00000000}
	blocks = [][]uint64{}
)

func init() {
	b5 := []byte{
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0,
	}
	blocks = append(blocks, []uint64{})
	for i := 0; i < len(b5)/8; i++ {
		blocks[0] = append(blocks[0], *((*uint64)(unsafe.Pointer(&b5[8*i]))))
	}

	b4 := []byte{
		1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1,
	}
	blocks = append(blocks, []uint64{})
	for i := 0; i < len(b4)/8; i++ {
		blocks[1] = append(blocks[1], *((*uint64)(unsafe.Pointer(&b4[8*i]))))
	}

	b3 := []byte{
		1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 0, 0, 0, 0, 0,
	}
	blocks = append(blocks, []uint64{})
	for i := 0; i < len(b3)/8; i++ {
		blocks[2] = append(blocks[2], *((*uint64)(unsafe.Pointer(&b3[8*i]))))
	}

	b2 := []byte{
		1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 0, 0,
	}
	blocks = append(blocks, []uint64{})
	for i := 0; i < len(b2)/8; i++ {
		blocks[3] = append(blocks[3], *((*uint64)(unsafe.Pointer(&b2[8*i]))))
	}
}

func findblock5(bits [400]byte) [][3]int {
	var (
		//start, offset, startbit uint32
		results = [][3]int{}
	)

	var i, j int
	for i = 0; i <= 15; i++ {
		for j = 0; j <= 15; j++ {
			idx := i*20 + j
			for k := 0; k < len(blocks); k++ {
				flag := true
				for n := 0; n < len(blocks[k]); n++ {
					bv := *((*uint64)(unsafe.Pointer(&bits[8*n+idx])))
					xv := blocks[k][n]
					if bv&xv != xv {
						flag = false
						break
					}
				}
				if flag {
					results = append(results, [3]int{5 - k, j, i})
					//break
				}
			}

		}
	}
	return results
}

var (
	bits = [400]byte{
		1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	}
)

func main() {
	t := time.Now()
	rets := findblock5((bits))
	use := time.Since(t)
	fmt.Println("time used: ", use.Nanoseconds(), len(rets))
	/*for i, v := range rets {
		fmt.Printf("%d, len: %d, x: %d, y: %d\n", i, v[0], v[1], v[2])
	}*/
}
